# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.1
#
# <auto-generated>
#
# Generated from file `bank.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Bank
_M_Bank = Ice.openModule('Bank')
__name__ = 'Bank'

if 'accountType' not in _M_Bank.__dict__:
    _M_Bank.accountType = Ice.createTempClass()
    class accountType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    accountType.STANDARD = accountType("STANDARD", 0)
    accountType.PREMIUM = accountType("PREMIUM", 1)
    accountType._enumerators = { 0:accountType.STANDARD, 1:accountType.PREMIUM }

    _M_Bank._t_accountType = IcePy.defineEnum('::Bank::accountType', accountType, (), accountType._enumerators)

    _M_Bank.accountType = accountType
    del accountType

if 'AccountData' not in _M_Bank.__dict__:
    _M_Bank.AccountData = Ice.createTempClass()
    class AccountData(object):
        def __init__(self, name='', surname='', pesel=0, income=0.0, type=_M_Bank.accountType.STANDARD, amount=0.0, guid=''):
            self.name = name
            self.surname = surname
            self.pesel = pesel
            self.income = income
            self.type = type
            self.amount = amount
            self.guid = guid

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Bank.AccountData):
                return NotImplemented
            else:
                if self.name != other.name:
                    return False
                if self.surname != other.surname:
                    return False
                if self.pesel != other.pesel:
                    return False
                if self.income != other.income:
                    return False
                if self.type != other.type:
                    return False
                if self.amount != other.amount:
                    return False
                if self.guid != other.guid:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_AccountData)

        __repr__ = __str__

    _M_Bank._t_AccountData = IcePy.defineStruct('::Bank::AccountData', AccountData, (), (
        ('name', (), IcePy._t_string),
        ('surname', (), IcePy._t_string),
        ('pesel', (), IcePy._t_long),
        ('income', (), IcePy._t_double),
        ('type', (), _M_Bank._t_accountType),
        ('amount', (), IcePy._t_double),
        ('guid', (), IcePy._t_string)
    ))

    _M_Bank.AccountData = AccountData
    del AccountData

if 'NotPermittedError' not in _M_Bank.__dict__:
    _M_Bank.NotPermittedError = Ice.createTempClass()
    class NotPermittedError(Ice.UserException):
        def __init__(self, message=''):
            self.message = message

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::NotPermittedError'

    _M_Bank._t_NotPermittedError = IcePy.defineException('::Bank::NotPermittedError', NotPermittedError, (), False, None, (('message', (), IcePy._t_string, False, 0),))
    NotPermittedError._ice_type = _M_Bank._t_NotPermittedError

    _M_Bank.NotPermittedError = NotPermittedError
    del NotPermittedError

if 'NoSuchAccountError' not in _M_Bank.__dict__:
    _M_Bank.NoSuchAccountError = Ice.createTempClass()
    class NoSuchAccountError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::NoSuchAccountError'

    _M_Bank._t_NoSuchAccountError = IcePy.defineException('::Bank::NoSuchAccountError', NoSuchAccountError, (), False, None, ())
    NoSuchAccountError._ice_type = _M_Bank._t_NoSuchAccountError

    _M_Bank.NoSuchAccountError = NoSuchAccountError
    del NoSuchAccountError

if 'NoSuchCurrencyError' not in _M_Bank.__dict__:
    _M_Bank.NoSuchCurrencyError = Ice.createTempClass()
    class NoSuchCurrencyError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::NoSuchCurrencyError'

    _M_Bank._t_NoSuchCurrencyError = IcePy.defineException('::Bank::NoSuchCurrencyError', NoSuchCurrencyError, (), False, None, ())
    NoSuchCurrencyError._ice_type = _M_Bank._t_NoSuchCurrencyError

    _M_Bank.NoSuchCurrencyError = NoSuchCurrencyError
    del NoSuchCurrencyError

_M_Bank._t_Account = IcePy.defineValue('::Bank::Account', Ice.Value, -1, (), False, True, None, ())

if 'AccountPrx' not in _M_Bank.__dict__:
    _M_Bank.AccountPrx = Ice.createTempClass()
    class AccountPrx(Ice.ObjectPrx):

        def getState(self, guid, context=None):
            return _M_Bank.Account._op_getState.invoke(self, ((guid, ), context))

        def getStateAsync(self, guid, context=None):
            return _M_Bank.Account._op_getState.invokeAsync(self, ((guid, ), context))

        def begin_getState(self, guid, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.Account._op_getState.begin(self, ((guid, ), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_Bank.Account._op_getState.end(self, _r)

        def requestLoan(self, guid, name, context=None):
            return _M_Bank.Account._op_requestLoan.invoke(self, ((guid, name), context))

        def requestLoanAsync(self, guid, name, context=None):
            return _M_Bank.Account._op_requestLoan.invokeAsync(self, ((guid, name), context))

        def begin_requestLoan(self, guid, name, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.Account._op_requestLoan.begin(self, ((guid, name), _response, _ex, _sent, context))

        def end_requestLoan(self, _r):
            return _M_Bank.Account._op_requestLoan.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Bank.AccountPrx.ice_checkedCast(proxy, '::Bank::Account', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Bank.AccountPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Bank::Account'
    _M_Bank._t_AccountPrx = IcePy.defineProxy('::Bank::Account', AccountPrx)

    _M_Bank.AccountPrx = AccountPrx
    del AccountPrx

    _M_Bank.Account = Ice.createTempClass()
    class Account(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Bank::Account', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Bank::Account'

        @staticmethod
        def ice_staticId():
            return '::Bank::Account'

        def getState(self, guid, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def requestLoan(self, guid, name, current=None):
            raise NotImplementedError("servant method 'requestLoan' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_AccountDisp)

        __repr__ = __str__

    _M_Bank._t_AccountDisp = IcePy.defineClass('::Bank::Account', Account, (), None, ())
    Account._ice_type = _M_Bank._t_AccountDisp

    Account._op_getState = IcePy.Operation('getState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Bank._t_AccountData, False, 0), (_M_Bank._t_NotPermittedError,))
    Account._op_requestLoan = IcePy.Operation('requestLoan', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_double, False, 0), (_M_Bank._t_NotPermittedError, _M_Bank._t_NoSuchCurrencyError))

    _M_Bank.Account = Account
    del Account

_M_Bank._t_AccountFactory = IcePy.defineValue('::Bank::AccountFactory', Ice.Value, -1, (), False, True, None, ())

if 'AccountFactoryPrx' not in _M_Bank.__dict__:
    _M_Bank.AccountFactoryPrx = Ice.createTempClass()
    class AccountFactoryPrx(Ice.ObjectPrx):

        def create(self, name, surname, pesel, income, context=None):
            return _M_Bank.AccountFactory._op_create.invoke(self, ((name, surname, pesel, income), context))

        def createAsync(self, name, surname, pesel, income, context=None):
            return _M_Bank.AccountFactory._op_create.invokeAsync(self, ((name, surname, pesel, income), context))

        def begin_create(self, name, surname, pesel, income, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.AccountFactory._op_create.begin(self, ((name, surname, pesel, income), _response, _ex, _sent, context))

        def end_create(self, _r):
            return _M_Bank.AccountFactory._op_create.end(self, _r)

        def getAccount(self, guid, context=None):
            return _M_Bank.AccountFactory._op_getAccount.invoke(self, ((guid, ), context))

        def getAccountAsync(self, guid, context=None):
            return _M_Bank.AccountFactory._op_getAccount.invokeAsync(self, ((guid, ), context))

        def begin_getAccount(self, guid, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.AccountFactory._op_getAccount.begin(self, ((guid, ), _response, _ex, _sent, context))

        def end_getAccount(self, _r):
            return _M_Bank.AccountFactory._op_getAccount.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Bank.AccountFactoryPrx.ice_checkedCast(proxy, '::Bank::AccountFactory', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Bank.AccountFactoryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Bank::AccountFactory'
    _M_Bank._t_AccountFactoryPrx = IcePy.defineProxy('::Bank::AccountFactory', AccountFactoryPrx)

    _M_Bank.AccountFactoryPrx = AccountFactoryPrx
    del AccountFactoryPrx

    _M_Bank.AccountFactory = Ice.createTempClass()
    class AccountFactory(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Bank::AccountFactory', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Bank::AccountFactory'

        @staticmethod
        def ice_staticId():
            return '::Bank::AccountFactory'

        def create(self, name, surname, pesel, income, current=None):
            raise NotImplementedError("servant method 'create' not implemented")

        def getAccount(self, guid, current=None):
            raise NotImplementedError("servant method 'getAccount' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_AccountFactoryDisp)

        __repr__ = __str__

    _M_Bank._t_AccountFactoryDisp = IcePy.defineClass('::Bank::AccountFactory', AccountFactory, (), None, ())
    AccountFactory._ice_type = _M_Bank._t_AccountFactoryDisp

    AccountFactory._op_create = IcePy.Operation('create', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_double, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AccountFactory._op_getAccount = IcePy.Operation('getAccount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Bank._t_AccountPrx, False, 0), (_M_Bank._t_NoSuchAccountError,))

    _M_Bank.AccountFactory = AccountFactory
    del AccountFactory

# End of module Bank
